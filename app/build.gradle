buildscript {
    repositories {
        jcenter()
        google()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'com.github.JakeWharton:sdk-manager-plugin:0ce4cdf08009d79223850a59959d9d6e774d0f77'
        classpath 'de.mobilej.unmock:UnMockPlugin:0.6.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'jacoco'

configurations {
    jacocoAnt
}

jacoco {
    toolVersion = '0.8.1'
}

android {
    compileSdkVersion 24
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId 'io.appium.uiautomator2'
        minSdkVersion 21
        targetSdkVersion 24
        versionCode 1
        archivesBaseName = 'appium-uiautomator2'
        /**
         * versionName should be updated and inline with version in package.json for every npm release.
         */
        versionName '1.10.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
        }
        customDebuggableBuildType {
            debuggable true
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = outputFileName.replace('debug.apk', "v${defaultConfig.versionName}.apk")
            }
        }
    }
    flavorDimensions 'default'
    lintOptions {
        abortOnError false
    }
    productFlavors {
        e2eTest {
            applicationId 'io.appium.uiautomator2.e2etest'
        }
        server {
            applicationId 'io.appium.uiautomator2.server'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }
}

unMock {
    keepStartingWith 'com.android.internal.util.'
    keepStartingWith 'android.util.'
    keepStartingWith 'android.view.'
    keepStartingWith 'android.internal.'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'io.netty:netty-all:4.0.41.Final'
    compile 'com.jayway.jsonpath:json-path:0.8.1'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.android.support.test:runner:0.5'
    compile 'com.android.support:support-annotations:23.1.1'
    compile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    unmock 'org.robolectric:android-all:7.1.0_r7-robolectric-0'
    testCompile 'org.json:json:20160810'
    testCompile 'junit:junit:4.12'
    testCompile 'org.powermock:powermock-module-junit4:1.7.4'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.7.4'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.4'
    testCompile 'org.powermock:powermock-classloading-xstream:1.7.4'
    testCompile 'org.robolectric:robolectric:3.3.2'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:23.1.1'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-web:2.2.2'
    jacocoAnt 'org.jacoco:org.jacoco.ant:0.8.1:nodeps'
}

task installAUT(type: Exec) {
    group = 'test'
    description = 'Install app under test'
    doFirst {
        println('Install AUT')
        def adb = android.getAdbExecutable().toString()
        def apk = file('../node_modules/android-apidemos/bin/ApiDemos-debug.apk')
        def sdkVersion = "$adb shell getprop ro.build.version.sdk".execute().text.trim()
        println "Device SDK version: $sdkVersion"
        /* This seems weird but it is what it is: https://github.com/wix/detox/issues/274 */
        def command = sdkVersion.toInteger() < 24 ? "$adb install -rg $apk" : "$adb install -r -g $apk"
        println "Execute command: $command"
        commandLine command.split(' ')
    }
}

task instrumentClasses(dependsOn : 'compileServerDebugSources') {
    def instrumentedClasesDir = "$buildDir.path/intermediates/classes-instrumented/server/debug"
    def originalClassesDir = "$buildDir.path/intermediates/classes/server/debug"
    doFirst {
        println 'Instrumenting classes'
        ant.taskdef(name: 'instrument',
                classname: 'org.jacoco.ant.InstrumentTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.instrument(destdir: instrumentedClasesDir) {
            fileset(dir: originalClassesDir)
        }

        /* Remove original classes from classpath and add the instrumented  */
        testServerDebugUnitTest.classpath -= files(originalClassesDir)
        testServerDebugUnitTest.classpath += files(instrumentedClasesDir)
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(instrumentClasses)) {
        tasks.withType(Test) {
            doFirst {
                /* Workaround for Robolectric */
                systemProperty 'jacoco-agent.destfile',
                        "$buildDir.path/jacoco/robolectricCoverage.exec"
            }
        }
    }
}

task createUnitTestCoverageReport(dependsOn: ['instrumentClasses', 'testServerDebugUnitTest']) {
    def jacocoDir = "$buildDir.path/jacoco"
    def reportDir = "$buildDir.path/reports/jacoco"
    doFirst {
        ant.taskdef(name: 'merge',
                classname: 'org.jacoco.ant.MergeTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.merge(destfile: "$jacocoDir/fullCoverage.exec") {
            ant.file(file: "$jacocoDir/robolectricCoverage.exec")
            ant.file(file: "$jacocoDir/testServerDebugUnitTest.exec")
        }
        file("$jacocoDir/robolectricCoverage.exec").delete()
        file("$jacocoDir/testServerDebugUnitTest.exec").delete()
    }
    doLast {
        ant.taskdef(name: 'report',
                classname: 'org.jacoco.ant.ReportTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.report() {
            executiondata {
                ant.file(file: "$jacocoDir/fullCoverage.exec")
            }
            structure(name: 'ServerDebugUnitTest') {
                classfiles {
                    fileset(dir: "$project.buildDir/intermediates/classes/server/debug")
                }
                sourcefiles {
                    fileset(dir: 'src/main/java')
                }
            }
            html(destdir: reportDir)
            xml(destfile: "$reportDir/coverage.xml")
        }
    }
}

afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith('connectedE2eTestDebugAndroidTest')) {
            task.dependsOn installAUT
        }
    }
}
